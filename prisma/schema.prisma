generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  email            String         @unique
  name             String?        // Used for Specialist.name
  firstName        String?
  lastName         String?
  password         String?
  phoneNumber      String?
  googleId         String?        
  profileImage     String?        // Used for Specialist.image
  location         String?
  biography        String?        // Added biography
  relationshipStatus String?
  orientation        String?
  height             String?
  ethnicity          String?
  zodiacSign         String?
  favoriteColor      String?
  favoriteMedia      String?
  petOwnership       String?
  createdAt        DateTime       @default(now())
  PasswordResetToken PasswordResetToken[]
  appointments     Appointment[]  @relation("UserAppointments")
  sentMessages     Message[]      @relation("SentMessagesUser")
  receivedMessages Message[]      @relation("ReceivedMessagesUser")
  conversations1   Conversation[] @relation("User1Conversations")
  conversations2   Conversation[] @relation("User2Conversations")
  posts            Post[]         @relation("UserPosts")
  replies          Reply[]        @relation("UserReplies")
  specialistApplication SpecialistApplication?
  isAdmin          Boolean        @default(false)
  status           String         @default("active")
  VideoSession     VideoSession[]
  ProfileVisit     ProfileVisit[] @relation("Visitor")
  Proposal         Proposal[]     @relation
  reviews      Review[]   @relation("UserReviews")
}

model PasswordResetToken {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  userId           String    @unique @db.ObjectId
  token            String    @unique
  expiresAt        DateTime
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime  @default(now())
}

model Appointment {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  userId           String    @db.ObjectId
  specialistId     String    @db.ObjectId
  date             DateTime
  time             String
  status           String    @default("upcoming")
  createdAt        DateTime  @default(now())
  user             User      @relation("UserAppointments", fields: [userId], references: [id], onDelete: Cascade)
  specialist       Specialist @relation("SpecialistAppointments", fields: [specialistId], references: [id], onDelete: Cascade)
  payment          Payment?
}

model Conversation {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  userId1          String       @db.ObjectId
  userId2          String       @db.ObjectId
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  user1            User         @relation("User1Conversations", fields: [userId1], references: [id], onDelete: Cascade)
  user2            User         @relation("User2Conversations", fields: [userId2], references: [id], onDelete: Cascade)
  messages         Message[]    @relation("ConversationMessages")

  Proposal Proposal[] @relation
}

model Specialist {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  name             String       // Populated from User.name
  image            String?      // Populated from User.profileImage
  location         String
  rating           Float?
  reviewCount      Int?
  rate             Float?
  role             String?
  tags             String?
  biography        String?
  education        String?
  license          String?
  companyCutPercentage Float? 
  createdAt        DateTime     @default(now())
  appointments     Appointment[] @relation("SpecialistAppointments")
  application      SpecialistApplication? @relation
  VideoSession     VideoSession[]
  availability     Availability[] @relation
  profileVisits    ProfileVisit[] @relation("Visitee")
  Proposal         Proposal[]     @relation
  reviews      Review[]   @relation("SpecialistReviews")
  discounts    Discount[] @relation
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  category  String
  authorId  String   @db.ObjectId
  author    User     @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  replies   Reply[]  @relation("PostReplies")
}

model Reply {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  postId       String   @db.ObjectId
  authorId     String   @db.ObjectId
  parentReplyId String?  @db.ObjectId
  post         Post     @relation("PostReplies", fields: [postId], references: [id], onDelete: Cascade)
  author       User     @relation("UserReplies", fields: [authorId], references: [id], onDelete: Cascade)
  parentReply  Reply?   @relation("ReplyReplies", fields: [parentReplyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childReplies Reply[]  @relation("ReplyReplies")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SpecialistApplication {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  userId       String      @unique @db.ObjectId
  location     String
  biography    String
  education    String
  license      String
  role         String
  tags         String
  status       String      @default("pending") // pending, reviewed, approved, rejected
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialist   Specialist? @relation(fields: [specialistId], references: [id], onDelete: SetNull)
  specialistId String?     @unique @db.ObjectId
}

model VideoSession {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  roomId       String    @unique
  userId       String    @db.ObjectId
  specialistId String    @db.ObjectId
  date         DateTime
  time         String
  status       String    @default("upcoming")
  roomUrl      String?
  signalingData Json?     // Store WebRTC signaling data (offer/answer)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialist   Specialist @relation(fields: [specialistId], references: [id], onDelete: Cascade)
}

model Availability {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  specialistId String   @db.ObjectId
  date         DateTime
  slots        String[]
  breakDuration Int?
  specialist   Specialist @relation(fields: [specialistId], references: [id], onDelete: Cascade)
  @@unique([specialistId, date])
}

model ProfileVisit {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @db.ObjectId
  specialistId String     @db.ObjectId
  createdAt    DateTime   @default(now())
  user         User       @relation("Visitor", fields: [userId], references: [id], onDelete: Cascade)
  specialist   Specialist @relation("Visitee", fields: [specialistId], references: [id], onDelete: Cascade)
}

model Message {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  text             String
  isAudio          Boolean      @default(false)
  imageUrl         String?
  senderId         String       @db.ObjectId
  recipientId      String       @db.ObjectId
  conversationId   String       @db.ObjectId
  createdAt        DateTime     @default(now())
  proposalId       String?      @db.ObjectId // New field
  senderUser       User         @relation("SentMessagesUser", fields: [senderId], references: [id], onDelete: Cascade)
  recipientUser    User         @relation("ReceivedMessagesUser", fields: [recipientId], references: [id], onDelete: Cascade)
  conversation     Conversation @relation("ConversationMessages", fields: [conversationId], references: [id], onDelete: Cascade)
  proposal         Proposal?    @relation(fields: [proposalId], references: [id], onDelete: SetNull) // New relation
}

model Proposal {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  specialistId  String       @db.ObjectId
  userId        String       @db.ObjectId
  conversationId String      @db.ObjectId
  date          DateTime
  time          String
  status        String       @default("pending") // pending, accepted, rejected
  initiator     String       @default("specialist") // "specialist" or "user"
  createdAt     DateTime     @default(now())
  specialist    Specialist   @relation(fields: [specialistId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  messages      Message[]    @relation // New relation
}

model Review {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  specialistId String   @db.ObjectId
  reviewerId   String   @db.ObjectId
  rating       Int
  feedback     String
  createdAt    DateTime @default(now())
  specialist   Specialist @relation("SpecialistReviews", fields: [specialistId], references: [id], onDelete: Cascade)
  reviewer     User       @relation("UserReviews", fields: [reviewerId], references: [id], onDelete: Cascade)
}

model Discount {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  specialistId String    @db.ObjectId
  name         String
  rate         Float
  discount     Float
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  specialist   Specialist @relation(fields: [specialistId], references: [id], onDelete: Cascade)
}

model Payment {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  appointmentId  String    @db.ObjectId @unique
  amount         Float
  status         String    @default("pending") // pending, successful, failed, disputed
  stripeId       String?
  createdAt      DateTime  @default(now())
  notes          String?
  appointment    Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

model CompanySettings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   @unique
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}